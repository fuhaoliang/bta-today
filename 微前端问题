1: 开发模式的挑战；
2: 子应用的管理和发布；
3: 菜单的配置；
4: 权限的控制；
5: 子应用如何结合主应用一起开发
6: 主子应用之间如何通信
核心问题：

1: 选择一个最适合我们场景的微前端框架，解决子应用的动态加载，生命周期管理，子应用的公共依赖处理。
2: 对应的配套工具，如支持同时启动多个子应用开发，也可以通过代理的方式把远程子应用代理到本地。
3: 有对应的子应用管理平台，支持子应用的发布，版本管理和依赖管理。
4: 有对应的菜单管理平台，支持菜单的配置和菜单权限配置，如菜单与角色关联或权限点关联。
5: 有对应的一套比较好的服务调用机制支持子应用之间的方法调用。

解法：
1: 容器框架
2: 研发平台（配置中心）
   1-1应用管理
   -1>: 应用创建
   -2>: 迭代管理
   -3>: 版本发布
   -4>: 子应用数据监控
   1-2菜单管理
   -1>: 菜单(名称和icon)
   -2>: 页面 (页面类型iframe 或者 子应用)、路由、关联子应用
   -3>: 子应用(子应用资源、版本号)
3: 权限管理（用户 - 角色 - 权限）
    权限点
    权限包（角色与权限点点管理）
    应用权限
4: 开发工具
   问题：
    工作台的场景，子应用是依赖于主应用的门店登录信息的，开发子应用的时候我必须先打开工作台，在浏览器写下登录态才能开发和调试。
    编辑器的场景，子应用依赖了其他子应用的一个方法，本地开发的时候必须同时启动主应用，依赖的子应用才能进行调试。
   解法：
    Cli 工具：主要支持对接研发平台完成子应用配置的获取，同时启动多个子应用。子应用的发布等，解决的是多个子应用一起开发的开发效率问题。
    Chrome 插件：主要支持将远程子应用代理到本地，比如打开预发/线上工作台，插件可以获取到主应用的所有子应用配置，然后可以配置哪个子应用代理到本地，主要是为了解决子应用依赖了其他子应用的问题

统一主应用
规范层：标准化数据协议，有利于主应用与主应用，子应用与子应用之间的互通。
数据层：数据源的提供方，包括数据的配置，数据的获取，数据的适配等。
引擎层：微前端方案标准化，收口基础能力，业务上理论上不需要感知使用的是什么微前端框架。
插件层：抽象通用的业务能力，通过集成插件的形式动态增强主工程的能力。
渲染层：负责业务布局的渲染，收口主应用具备的业务能力。


